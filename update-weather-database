#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

import glob
import os
import sys
from astropy.time import Time
from rockit.common import log
from rockit.weatherlog import Config


if __name__ == '__main__':
    if 'WEATHERLOG_CONFIG_PATH' in os.environ:
        config = Config(os.environ['WEATHERLOG_CONFIG_PATH'])
    else:
        # Load the config file defined in the WEATHERLOG_CONFIG_PATH environment variable or from the
        # default system location (/etc/weatherlog/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/weatherlog/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as WEATHERLOG_CONFIG_PATH=/path/to/config.json update-weather-database')
            sys.exit(1)

        config = Config(files[0])

    if config.database['type'] == 'mysql':
        import pymysql
        db = pymysql.connect(host=config.database['host'],
                             db=config.database['db'],
                             user=config.database['user'],
                             autocommit=True)

        with db.cursor() as cur:
            cur.execute('SELECT id, name FROM weather_sensors')
            sensor_name_id_map = {s_name: s_id for s_id, s_name in cur.fetchall()}
    else: # sqlite
        import sqlite3
        db = sqlite3.connect(config.database['path'])
        with db:
            db.execute('PRAGMA foreign_keys = ON')
            rows = db.execute('SELECT id, name FROM weather_sensors').fetchall()
            sensor_name_id_map = {s_name: s_id for s_id, s_name in rows}

    for key, info in config.watchers.items():
        try:
            with info['daemon'].connect() as d:
                data = getattr(d, info['method'])()

            date = Time(data['date'], format='isot', scale='utc')
            bin_idx = int(date.unix / config.bin_length) - config.bin_epoch
            values = []
            for f_key, f_info in info['fields'].items():
                value = data.get(f_key, None)
                if value is not None and (not f_info.get('filter_invalid', False) or data.get(f'{f_key}_valid', False)):
                    sensor = sensor_name_id_map.get(f_info['sensor'], None)
                    if sensor is not None:
                        if 'date_field' in f_info:
                            sensor_date = Time(data[f_info['date_field']], format='isot', scale='utc')
                            sensor_bin_idx = int(sensor_date.unix / config.bin_length) - config.bin_epoch
                            values.append((sensor_bin_idx, sensor, int(sensor_date.unix), value))
                        else:
                            values.append((bin_idx, sensor, int(date.unix), value))
                    else:
                        print(f'unknown sensor type {f_info["sensor"]}')

        except Exception as e:
            log.error(config.log_name, f'Failed to query sensor `{key}` ({e})')
            sys.stdout.flush()
            continue

        try:
            if config.database['type'] == 'mysql':
                with db.cursor() as cur:
                    cur.executemany(
                        'REPLACE INTO weather_data (bin, sensor_id, utc, value) VALUES (%s, %s, %s, %s);',
                        values)
            else: # sqlite
                with db:
                    db.executemany(
                        'REPLACE INTO weather_data (bin, sensor_id, utc, value) VALUES (?, ?, ?, ?)',
                        values)

        except Exception as e:
            log.error(config.log_name, f'Failed to update database ({e})')
            sys.stdout.flush()
            continue

    db.close()